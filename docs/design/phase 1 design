

#### 1. User Management:
In this component, users will be able to register, login, and manage their profile.

- **Registration**: When a user tries to register, they provide their email, name, and password. This information is sent to the backend, where a new user record is created in the database. An OTP is generated and sent to the user's email for verification.

- **Login**: Users provide their email and password. This information is sent to the backend, where the credentials are validated. If the credentials are valid, the user is authenticated, and a session or JWT token is generated and sent back to the client.

- **Profile Management**: Authenticated users can view and update their profile information. When the user requests to view their profile, a request is sent to the backend with their user ID. The backend fetches the user's information from the database and returns it to the client.

#### 2. Donation Management:
In this component, users can donate items, view their donation history, and make requests for items.

- **Donate Items**: Users fill out a form with details about the item they want to donate. This information is sent to the backend, where a new donation record is created in the database. An email notification is also sent to all users to inform them about the new item.

- **View Donation History**: When a user wants to view their donation history, a request is sent to the backend with their user ID. The backend fetches all donations made by the user from the database and returns them to the client.

- **Item Requests**: Users can make requests for specific items. When a user makes a request, the details of the request are sent to the backend, where a new request record is created in the database.

#### 3. Marketplace Management:
This component allows users to view available items and claim them.

- **View Available Items**: When a user visits the marketplace, a request is sent to the backend to fetch all available items. The backend fetches all items from the database where `item_status` is "available" and returns them to the client.

- **Claim Items**: When a user decides to claim an item, a request is sent to the backend with the item's ID. The backend updates the `item_status` in the database to "claimed" and assigns the item to the user.

#### 4. Notification System:
The notification system is responsible for sending email notifications to users when a new item is added to the marketplace.

- **Email Notifications**: When a new item is donated, a function is triggered in the backend that sends an email to all users about the new item. This uses a service like Amazon SES.

#### 5. Admin Management:
Admin users have additional capabilities to manage the platform.

- **User Management**: Admins can view all users, delete users, and promote users to admin status. These actions are performed via requests to admin-specific backend endpoints.

- **Donation and Marketplace Management**: Admins can view all donations, change the status of items, and remove items from the marketplace.

#### 6. Search Functionality:
This feature allows users to search for specific items in the marketplace.

- **Item Search**: Users can enter a search term in a search bar on the marketplace page. This sends a request to the backend with the search term. The backend queries the database for items that match the search term and returns them to the client.

#### 7. Reporting and Analytics:
This feature provides insights into the platform's performance and usage.

- **Reports**: Admins can view reports on donations, item requests, and user activity. These reports are generated by the backend, which fetches and aggregates data from the database.




#### Interactions:

1. **User Management & Donation Management**: User management is linked with donation management. When a user makes a donation, this action is linked to their user account, which allows the system to track who donated what and when.

2. **User Management & Marketplace Management**: Similarly, when a user claims an item in the marketplace, this action is linked to their user account, allowing the system to track who claimed what and when.

3. **Donation Management & Marketplace Management**: The donations made by users become the available items in the marketplace. When an item is claimed, it should be marked as such and removed from the available items.

4. **User Management & Notification System**: The notification system uses the email addresses from the user accounts to send out notifications.

5. **Donation Management & Notification System**: Whenever a new donation is made, the notification system is triggered to inform all users about the new item.

6. **User Management & Admin Management**: Admins, who are also users, have extra permissions that allow them to manage other users and the platform in general.

7. **Marketplace Management & Search Functionality**: The search functionality works within the marketplace to help users find specific items.

8. **All Components & Reporting and Analytics**: The reporting and analytics component gathers data from all other components to generate insights into platform usage and performance.

These functional requirements, interactions, and dependencies between components form the basis of the Donatify application. The actual implementation may involve additional technical details and considerations.




#### FR and US

**1. User Management**

Functional Requirements:

- FR1.1: The system should allow users to register with a valid email ID.
- FR1.2: The system should verify the email ID during registration.
- FR1.3: The system should allow users to login using their registered email ID and password.
- FR1.4: The system should authenticate users using JWT.

User Stories:

- US1.1: As a new user, I want to register with my email ID so that I can access the platform.
- US1.2: As a new user, I want to receive an email verification during registration to ensure the security of my account.
- US1.3: As a registered user, I want to login with my email ID and password so that I can use the platform.
- US1.4: As a registered user, I want my sessions to be managed securely so that my account data is safe.

**2. Donation Management**

Functional Requirements:

- FR2.1: The system should allow users to post items for donation with relevant details (description, category, condition, etc.).
- FR2.2: The system should allow users to view their past donations.

User Stories:

- US2.1: As a user, I want to post items for donation so that others can claim them.
- US2.2: As a user, I want to view my past donations so that I can keep track of what I've contributed.

**3. Marketplace Management**

Functional Requirements:

- FR3.1: The system should display all available items for donation in a marketplace view.
- FR3.2: The system should allow users to claim items from the marketplace.
- FR3.3: The system should limit the number of items a user can claim within a certain period.

User Stories:

- US3.1: As a user, I want to view all available items so that I can decide what to claim.
- US3.2: As a user, I want to claim items from the marketplace so that I can receive them.
- US3.3: As a user, I want to have a fair opportunity to claim items, and I want the system to prevent others from claiming too many items at once.

**4. Notification System**

Functional Requirements:

- FR4.1: The system should send users notifications about new items added to the marketplace.

User Stories:

- US4.1: As a user, I want to receive notifications about new items so that I can claim them before others do.


